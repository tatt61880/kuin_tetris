{
    tetris.kn (for Kuin 1.00):
        Last Modified: 2013/09/22 23:12:40.
        Created by @tatt61880
            https://twitter.com/tatt61880
            https://github.com/tatt61880

    Thanks to tetris.cpp (MIT License):
        Created by @tkihira, @DQNEO
            http://twitter.com/tkihira/status/262437799775592449
            https://github.com/DQNEO/CppTetris
}

var Board: [][]int

class CPos()
    var x: int
    var y: int
    func Init(x: int, y: int): @CPos
        do this.x :: x
        do this.y :: y
        return this
    end func
end class

class CBlock()
    var rotate: int
    var p: []@CPos
    func Init(r: int, p0x: int, p0y: int, p1x: int, p1y: int, p2x: int, p2y: int): @CBlock
        do this.rotate :: r
        do this.p :: #[3]@CPos
        do this.p[0] :: (#@CPos).Init(p0x, p0y)
        do this.p[1] :: (#@CPos).Init(p1x, p1y)
        do this.p[2] :: (#@CPos).Init(p2x, p2y)
        return this
    end func
end class

var Block: []@CBlock

class CStatus()
    var x: int
    var y: int
    var type: int
    var rotate: int
    { Kuin 0.99にはディープコピー演算子 ## が実装されておらず、Copyメソッドもプライベートになっているので、MyCopy経由でCopyメソッドを呼び出します }
    func MyCopy(): @CStatus
        return this.Copy()
    end func
end class

var Current: @CStatus

func Random(max: int): int
    return Rnd@Get(0, max-1)
end func

func PutBlock(s: @CStatus, action: bool): bool
    if(@Board[s.x][s.y] <> 0)
        return false
    end if

    if(action)
        do @Board[s.x][s.y] :: s.type
    end if

    for i(0, 2)
        var dx: int :: @Block[s.type].p[i].x
        var dy: int :: @Block[s.type].p[i].y
        var r: int :: s.rotate % @Block[s.type].rotate
        for(0, r-1)
            var nx: int :: dx
            var ny: int :: dy
            do dx :: ny
            do dy :: -nx
        end for
        if(@Board[s.x + dx][s.y + dy] <> 0)
            return false
        end if
        if(action)
            do @Board[s.x + dx][s.y + dy] :: s.type
        end if
    end for
    if(!action)
        do @PutBlock(s, true)
    end if
    return true
end func

func DeleteBlock(s: @CStatus): bool
    do @Board[s.x][s.y] :: 0

    for i(0, 2)
        var dx: int :: @Block[s.type].p[i].x
        var dy: int :: @Block[s.type].p[i].y
        var r: int :: s.rotate % @Block[s.type].rotate
        for(0, r-1)
            var nx: int :: dx
            var ny: int :: dy
            do dx :: ny
            do dy :: -nx
        end for
        do @Board[s.x + dx][s.y + dy] :: 0
    end for

    return true
end func

func ShowBoard()
    for x(1, 10)
        for y(1, 20)
            do @BitBlt((x - 1) * 24, (20 - y) * 24, @Board[x][y])
        end for
    end for
end func

func ProcessInput(): bool
    var ret: bool :: false
    { var n:@CStatus :: tetris@Current { tetris.cppではCurrentは構造体(代入すると値がコピーされることになる)。tetris.knではクラス。代入すると同じインスタンスを指すことになってしまうので、正しく動作させるにはコピーする必要がある。 } }
    var n: @CStatus :: (@Current).MyCopy()
    if(Input@Pad(0, Input@EBtn#Left) > 0)
        do n.x :- 1
    elif(Input@Pad(0, Input@EBtn#Right) > 0)
        do n.x :+ 1
    elif(Input@Pad(0, Input@EBtn#Up) > 0 & Input@Pad(0, Input@EBtn#Up) < 5)
        do n.rotate :+ 1
    elif(Input@Pad(0, Input@EBtn#Down) > 0)
        do n.y :- 1
        do ret :: true
    end if

    if(n.x <> @Current.x | n.y <> @Current.y | n.rotate <> @Current.rotate)
        do @DeleteBlock(@Current)
        if(@PutBlock(n, false))
            do @Current :: n
        else
            do @PutBlock(@Current, false)
        end if
    end if

    return ret
end func

func GameOver()
    for x(1, 10)
        for y(1, 20)
            if(@Board[x][y] <> 0)
                do @Board[x][y] :: 1
            end if
        end for
    end for
    while(true) { KillTimer(hMainWindow, 100)の代わりの無限ループ }
        do @ShowBoard()
        do Kuin@Act()
    end while
end func

func DeleteLine()
    for y(1, 22)
        var flag: bool :: true
        for x(1, 10)
            if(@Board[x][y] = 0)
                do flag :: false
            end if
        end for

        if(flag)
            for j(y, 22)
                for i(1, 10)
                    do @Board[i][j] :: @Board[i][j + 1]
                end for
            end for
            do y :- 1
        end if
    end for
end func

func blockDown()
    do @DeleteBlock(@Current)
    do @Current.y :- 1
    if(!@PutBlock(@Current, false))
        do @Current.y :+ 1
        do @PutBlock(@Current, false)

        do @DeleteLine()

        do @Current.x :: 5
        do @Current.y :: 21
        do @Current.type :: @Random(7) + 1
        do @Current.rotate :: @Random(4)
        if(!@PutBlock(@Current, false))
            do @GameOver()
        end if
    end if
end func

func Init(cfg: Kuin@CCfg)
    do cfg.Title :: "テトリス"
end func

func Main()
    { 手元の環境でうまく動作しないので調査中…。 }
    do @Bitmap :: Draw@LoadTex("block.kntex")

    { Init Block }
    do @Block :: #[8]@CBlock
    do @Block[0] :: (#@CBlock).Init(1, 0,  0, 0, 0, 0, 0) {null}
    do @Block[1] :: (#@CBlock).Init(2, 0, -1, 0, 1, 0, 2) {tetris}
    do @Block[2] :: (#@CBlock).Init(4, 0, -1, 0, 1, 1, 1) {L1}
    do @Block[3] :: (#@CBlock).Init(4, 0, -1, 0, 1,-1, 1) {L2}
    do @Block[4] :: (#@CBlock).Init(2, 0, -1, 1, 0, 1, 1) {key1}
    do @Block[5] :: (#@CBlock).Init(2, 0, -1,-1, 0,-1, 1) {key2}
    do @Block[6] :: (#@CBlock).Init(1, 0,  1, 1, 0, 1, 1) {square}
    do @Block[7] :: (#@CBlock).Init(4, 0, -1, 1, 0,-1, 0) {T}

    { Init Board }
    do @Board :: #[12][]int
    for i(0, 11)
        do @Board[i] :: #[25]int
    end for
    for x(0, 11)
        for y(0, 24)
            if(x = 0 | x = 11 | y = 0)
                do @Board[x][y] :: 1
            else
                { Kuinの場合、デフォルトで0が入っているので、この処理は不要 }
                { do @Board[x][y] :: 0 }
            end if
        end for
    end for

    { Init Current }
    do @Current :: #@CStatus
    do @Current.x :: 5
    do @Current.y :: 21
    do @Current.type :: @Random(7) + 1
    do @Current.rotate :: @Random(4)

    do @PutBlock(@Current, false)
    var w: int :: 0

    while(true)
        do Kuin@Act()
        {do Kuin@Dbg("Kuin@FPS()=" ~ Kuin@FPS().ToStr())}
        {do Kuin@Dbg("Kuin@Cnt()=" ~ Kuin@Cnt().ToStr())}
        if(w % 4 = 0)
            if(@ProcessInput())
                do w :: 0
            end if
        end if
        if(w % 10 = 0)
            {do Kuin@Dbg("w % 5 = 0")}
            do @blockDown()
        end if
        do w :+ 1
        do @ShowBoard()
    end while
end func

var Bitmap: Draw@CTex
func BitBlt(x: int, y: int, id: int)
    do @Bitmap.Draw(0.0, id$ float * 24.0, 23.0, 23.0, x$ float, y$ float, 1.0, 1.0, 1.0, 1.0)
end func

